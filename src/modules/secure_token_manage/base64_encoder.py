import sys  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å sys –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –ø—É—Ç—è–º–∏.
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π.
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—É—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.
from src.utils.logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç logger –∏–∑ –º–æ–¥—É–ª—è, –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∑–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

import base64  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å base64 –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç base64.
import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å re –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Ö–æ—Ç—è –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–¥–µ).

def encode_key_and_token(key: str, encrypted_token) -> str:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–ª—é—á –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –∞ –∑–∞—Ç–µ–º –∫–æ–¥–∏—Ä—É–µ—Ç –∏—Ö –≤ base64.
    
    :param key: –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
    :param encrypted_token: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –±–∞–π—Ç–∞–º–∏.
    :return: –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.
    """
    # –ï—Å–ª–∏ encrypted_token —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ –±–∞–π—Ç—ã
    if isinstance(encrypted_token, str):
        encrypted_token = encrypted_token.encode('utf-8')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±–∞–π—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8.
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ encrypted_token —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –±–∞–π—Ç–∞–º–∏
    if not isinstance(encrypted_token, bytes):
        raise TypeError("encrypted_token –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º bytes")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±–∞–π—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

    logger.info("üîê –ö–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ base64...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.

    # –ö–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –∏ —Ç–æ–∫–µ–Ω –≤ base64
    encoded_key = base64.b64encode(key.encode('utf-8')).decode('utf-8')  # –ö–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –≤ base64 –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É.
    encoded_token = base64.b64encode(encrypted_token).decode('utf-8')  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ base64 –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É.
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    combined_data = f"{encoded_key}|{encoded_token}"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ '|'.
    logger.info(f"üéâ –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64: {combined_data}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    return combined_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

def decode_base64(encoded_data: str) -> bytes:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ base64 –≤ –±–∞–π—Ç—ã.
    
    :param encoded_data: –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.
    :return: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã.
    """
    try:
        return base64.b64decode(encoded_data)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ base64 –≤ –±–∞–π—Ç—ã.
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ base64: {str(e)}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞.
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

def decode_key_and_token(encoded_data: str):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á –∏ —Ç–æ–∫–µ–Ω, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ '|'.
    
    :param encoded_data: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.
    :return: –ö–ª—é—á –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.
    """
    logger.info("üîì –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ base64...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–ª—é—á –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        parts = encoded_data.split('|')  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É '|' –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏.
        logger.info(f"üìë –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {parts}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.

        if len(parts) != 2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –û–∂–∏–¥–∞—é—Ç—Å—è –∫–ª—é—á –∏ —Ç–æ–∫–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ: {len(parts)}")
            return None, None  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–≤–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ base64
        decoded_key = base64.b64decode(parts[0]).decode('utf-8')  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –∏–∑ base64.
        decoded_token = decode_base64(parts[1])  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é decode_base64.
        
        if decoded_token is None:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å.
            return None, None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –±—ã–ª –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.
        
        logger.info(f"üîë –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: {decoded_key}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç b'...'
        decoded_token_str = decoded_token.decode('utf-8') if isinstance(decoded_token, bytes) else decoded_token  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –≤ –±–∞–π—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        logger.info(f"üéüÔ∏è –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {decoded_token_str}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.

        return decoded_key, decoded_token_str  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ —Ç–æ–∫–µ–Ω.
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏.
        return None, None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
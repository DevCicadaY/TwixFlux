import time  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import signal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
import psutil  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
import asyncio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
import traceback  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞–º–∏ –æ—à–∏–±–æ–∫
import sys  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π
from src.utils.logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
import socket  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ —Å–æ–∫–µ—Ç–∞–º–∏

# –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–µ–±—è –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ
MAX_IDLE_TIME = 60  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
last_activity_time = time.time()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
PORTS_TO_MONITOR = [8080]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

def check_ports_closed():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫—Ä—ã—Ç—ã –ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
    –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    –ï—Å–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    for port in PORTS_TO_MONITOR:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ—Ä—Ç–∞–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:  # –°–æ–∑–¥–∞—ë–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            result = s.connect_ex(('localhost', port))  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ—Ä—Ç–æ–º
            if result == 0:  # –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
                logger.warning(f"üö® –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
                return False
    logger.info("‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã.")  # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã
    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã

async def monitor_ports():
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã.
    """
    while True:  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç–æ–≤
        if check_ports_closed():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç—ã –ª–∏ –ø–æ—Ä—Ç—ã
            logger.info("‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã. –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            os.kill(os.getpid(), signal.SIGINT)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–∏–≥–Ω–∞–ª SIGINT
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        await asyncio.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

async def is_process_hanging(pid, timeout=10):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–∏—Å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å. üõë
    –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ `timeout` —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    try:
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID {pid}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        proc = psutil.Process(pid)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID
        cpu_usage = proc.cpu_percent(interval=timeout)  # –ò–∑–º–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if cpu_usage == 0.0:  # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CPU
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU —Ä–∞–≤–Ω–æ 0.")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏–µ
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å
        logger.debug(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ CPU: {cpu_usage}.")  # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω
    except psutil.NoSuchProcess:  # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
        logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω

async def monitor_process(pid, check_interval=5):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID. üëÄ
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª SIGINT, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å.
    """
    logger.info(f"üîß –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID {pid}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    while True:  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if await is_process_hanging(pid):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–∏—Å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            logger.warning(f"üõë –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–∏—Å. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª SIGINT...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏–µ
            os.kill(pid, signal.SIGINT)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª SIGINT –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        await asyncio.sleep(check_interval)  # –ñ–¥—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

async def monitor_idle_time():
    """
    –°–ª–µ–¥–∏—Ç –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ—Å—Ç–æ—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–µ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏. ‚è±Ô∏è
    """
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ—è
    while True:  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è
        idle_time = time.time() - last_activity_time  # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
        logger.debug(f"‚è≥ –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {idle_time} —Å–µ–∫—É–Ω–¥.")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
        if idle_time > MAX_IDLE_TIME:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ {MAX_IDLE_TIME} —Å–µ–∫—É–Ω–¥. –ó–∞–≤–µ—Ä—à–∞—é...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            os.kill(os.getpid(), signal.SIGINT)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        await asyncio.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

async def check_shutdown():
    """
    –§—É–Ω–∫—Ü–∏—è-–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. üõë
    –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info("üõ†Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    while True:  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        shutdown_input = input("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: ").strip().lower()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if shutdown_input == 'exit':  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "exit"
            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –í—ã–∫–ª—é—á–∞—é...")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            os.kill(os.getpid(), signal.SIGINT)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        await asyncio.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

async def monitor_python_exceptions():
    """
    –õ–æ–≤–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É. üêç‚ùå
    """
    logger.info("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Python...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    def exception_handler(exc_type, exc_value, exc_tb):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logger.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Python:")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        traceback.print_exception(exc_type, exc_value, exc_tb)  # –ü–µ—á–∞—Ç–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
        logger.error("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        os.kill(os.getpid(), signal.SIGINT)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    
    sys.excepthook = exception_handler  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. üöÄ
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    pid = os.getpid()  # –ü–æ–ª—É—á–∞–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è
    monitor_process_task = asyncio.create_task(monitor_process(pid))
    logger.info("üëÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Å—Ç–æ—è
    monitor_idle_time_task = asyncio.create_task(monitor_idle_time())
    logger.info("‚è≥ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å—Ç–æ—è...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
    shutdown_task = asyncio.create_task(check_shutdown())
    logger.info("üîí –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Python
    monitor_exceptions_task = asyncio.create_task(monitor_python_exceptions())
    logger.info("‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç–æ–≤
    monitor_ports_task = asyncio.create_task(monitor_ports())
    logger.info("üåê –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç–æ–≤...")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã)
    try:
        while True:  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
            logger.info("üõ†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç...")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            await asyncio.sleep(1)  # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É

            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            global last_activity_time
            last_activity_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

            # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á)

    except KeyboardInterrupt:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ Ctrl+C
        logger.info("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ Ctrl+C.")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C
    except Exception as e:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    finally:  # –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫
        logger.info("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
if __name__ == "__main__":  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main